{
  "include": [
    "src/**/*.ts"<% if (jsx) { -%>,
    "src/**/*.tsx"<% } %>
  ],
  "compilerOptions": {
    "rootDir": "src",
<% if(!composite) { -%>
    /* No emit in default config file. See build config file for config to build declaration files */
    "noEmit": true,
<% } else { -%>
    "composite": true,
    "incremental": true,
    "noEmit": false,
    "noEmitOnError": true,
    "declaration": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "outDir": "node_modules/.cache/tsc",
    "tsBuildInfoFile": "node_modules/.cache/tsc/tsbuildinfo",
<% } -%>

    /* No need to check .d.ts files */
    "skipLibCheck": true,

    "target": "esnext",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "esnext",                       /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": [<%- dom ? '"dom", ' : '' %>"esnext"],                 /* Polyfills are imported either by babel or with polyfill.io */
    <%= jsx ? '' : '// ' %>"jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "isolatedModules": true,                  /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Enable all strict type-checking options. */
    "strict": true,

    /* Additional Checks */
    "noUnusedLocals": true,                   /* Report errors on unused locals. */
    "noUnusedParameters": false,              /* Report errors on unused parameters. */
    "noImplicitReturns": true,                /* Report error when not all code paths in function return a value. */
    "noFallthroughCasesInSwitch": true,       /* Report errors for fallthrough cases in switch statement. */
    "forceConsistentCasingInFileNames": true,

    /* Module Resolution Options */
    "moduleResolution": "node",               /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "allowSyntheticDefaultImports": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    <% if (resolveJsonModule) { -%>
    "resolveJsonModule": <%= resolveJsonModule %>,
    <% } -%>
    "baseUrl": "<%= baseUrl %>"<% if (monorepoPackageNames) { %>,<% } %> /* Base directory to resolve non-absolute module names. */
    <% if (monorepoPackageNames && monorepoPackageNames.length !== 0) { -%>
    "paths": {
      <% monorepoPackageNames.forEach((packageName, index) => { %>
      "<%= packageName %>": ["../../../<%= monorepoPackageSrcPaths[index] %>"],
      "<%= packageName %>/*": ["../../../<%= monorepoPackageSrcPaths[index] %>/*"]<%= index === monorepoPackageNames.length -1 ? '' : ',' -%>
      <% }) %>
    }<% } %>
  }<% if (monorepoPackageNames && monorepoPackageNames.length) { -%>,
  "references": [
    <% monorepoPackageNames.forEach((packageName, index) => { -%>
        { "path": "../<%= packageName %>/tsconfig.json" }<%= index === monorepoPackageNames.length -1 ? '' : ',' %>
    <% }) -%>
  ],
  <% } -%>
}
