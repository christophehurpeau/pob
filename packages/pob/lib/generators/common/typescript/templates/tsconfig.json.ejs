{
  "include": [
    "<%= rootDir %>/**/*.ts"<% if (jsx) { -%>,
    "<%= rootDir %>/**/*.tsx"<% } %>
  ],
<% if(rootDir === '.') { -%>
  "exclude": [
    "node_modules"
  ],
<% } -%>
  "compilerOptions": {
    "rootDir": "<%= rootDir %>",
    "incremental": true,
<% if(!composite) { -%>
    /* No emit in default config file. See build config file for config to build declaration files */
    "noEmit": true,
<% } else { -%>
    "composite": true,
    "noEmit": false,
    "noEmitOnError": true,
    "declaration": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "outDir": "node_modules/.cache/tsc",
    "tsBuildInfoFile": "node_modules/.cache/tsc/tsbuildinfo",
<% } -%>

    /* No need to check .d.ts files */
    "skipLibCheck": true,

    "target": "esnext",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "esnext",                       /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": [<%- dom ? '"dom", ' : '' %>"esnext"],                 /* Polyfills are imported either by babel or with polyfill.io */
    <%= jsx ? '' : '// ' %>"jsx": "react-jsx",                     /* 'react-jsx' is used with react/jsx-runtime (react >=17 || >= 16.14.0 | >= 15.7.0) */
    "isolatedModules": true,                  /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Enable all strict type-checking options. */
    "strict": true,

    /* Additional Checks */
    "noUnusedLocals": true,                   /* Report errors on unused locals. */
    "noUnusedParameters": false,              /* Report errors on unused parameters. */
    "noImplicitReturns": true,                /* Report error when not all code paths in function return a value. */
    "noFallthroughCasesInSwitch": true,       /* Report errors for fallthrough cases in switch statement. */
    "forceConsistentCasingInFileNames": true,

    /* Module Resolution Options */
    "moduleResolution": "node",               /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "allowSyntheticDefaultImports": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    <% if (resolveJsonModule) { -%>
    "resolveJsonModule": <%= resolveJsonModule %>,
    <% } -%>
    "baseUrl": "<%= baseUrl %>"<% if (monorepoPackageSrcPaths) { %>,<% } %> /* Base directory to resolve non-absolute module names. */
    <% if (monorepoPackageSrcPaths && monorepoPackageSrcPaths.length !== 0) { -%>
    "paths": {
      <% monorepoPackageSrcPaths.forEach(([packageName, packageLocation], index) => { %>
      "<%= packageName %>": ["../<%= packageLocation %>"],
      "<%= packageName %>/*": ["../<%= packageLocation %>/*"]<%= index === monorepoPackageSrcPaths.length -1 ? '' : ',' -%>
      <% }) %>
    }<% } %>
  }<% if (monorepoPackageBuildReferences && monorepoPackageBuildReferences.length) { -%>,
  "references": [
    <% monorepoPackageBuildReferences.forEach((monorepoPackageSrcPath, index) => { -%>
        { "path": "<%= monorepoPackageSrcPath %>/tsconfig.json" }<%= index === monorepoPackageBuildReferences.length -1 ? '' : ',' %>
    <% }) -%>
  ],
  <% } -%>
}
