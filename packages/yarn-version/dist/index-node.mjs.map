{"version":3,"file":"index-node.mjs","sources":["../src/utils/UsageError.ts","../src/utils/mapUtils.ts","../src/utils/packageDependenciesUtils.ts","../src/utils/workspaceUtils.ts","../src/utils/bumpTypeUtils.ts","../src/utils/conventionalChangelogUtils.ts","../src/utils/conventionalCommitConfigUtils.ts","../src/utils/execCommand.ts","../src/utils/generatorUtils.ts","../src/utils/gitUtils.ts","../src/utils/githubUtils.ts","../src/utils/packageUtils.ts","../src/utils/updateChangelog.ts","../src/commands/version.ts","../src/index.ts"],"sourcesContent":["export class UsageError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"UsageError\";\n  }\n}\n","export function getMapArrayItemForKey<K, V>(map: Map<K, V[]>, key: K): V[] {\n  let value: V[] | undefined = map.get(key);\n  if (value === undefined) {\n    map.set(key, (value = [] as V[]));\n  }\n  return value;\n}\n","/**\n * Combination of an optional scope and name.\n *\n * eg `@npm/types`\n */\nexport interface PackageDescriptorName {\n  scope?: string;\n  name: string;\n}\n\ninterface DescriptorUtils<Descriptor> {\n  parse: (value: string) => Descriptor;\n  stringify: (descriptor: Descriptor) => string;\n}\n\nexport const PackageDescriptorNameUtils: DescriptorUtils<PackageDescriptorName> =\n  {\n    parse: (value) => {\n      if (value.startsWith(\"@\")) {\n        const [scope, name] = value.slice(1).split(\"/\", 2);\n        if (!scope || !name) {\n          throw new Error(`Invalid package descriptor name: ${value}`);\n        }\n        return { scope, name };\n      }\n      return { name: value };\n    },\n    stringify: (descriptor) => {\n      return descriptor.scope === undefined\n        ? descriptor.name\n        : `@${descriptor.scope}/${descriptor.name}`;\n    },\n  };\n\nexport interface PackageDependencyDescriptor {\n  key: string;\n  name: PackageDescriptorName;\n  selector: string; // can be npm tag or version or version range or git url or local folder path\n}\n\ninterface PackageDependencyDescriptorUtils<\n  Descriptor = PackageDependencyDescriptor,\n> {\n  make: (descriptor: Descriptor, selector: string) => Descriptor;\n  parse: (dependencyKey: string, dependencyValue: string) => Descriptor;\n  stringify: (descriptor: Descriptor) => [key: string, value: string];\n}\n\nexport const PackageDependencyDescriptorUtils: PackageDependencyDescriptorUtils =\n  {\n    make: (descriptor, selector) => {\n      return { key: descriptor.key, name: descriptor.name, selector };\n    },\n    parse: (dependencyKey, dependencyValue) => {\n      const [name, selector] = dependencyValue.startsWith(\"npm:\")\n        ? (() => {\n            const v = dependencyValue.slice(\"npm:\".length);\n            if (!v.startsWith(\"@\")) return v.split(\"@\", 2) as [string, string];\n            const [packageNameWithoutFirstChar, selector] = v\n              .slice(1)\n              .split(\"@\", 2);\n            if (!packageNameWithoutFirstChar || !selector) {\n              throw new Error(`Invalid package descriptor: ${dependencyValue}`);\n            }\n            return [`@${packageNameWithoutFirstChar}`, selector];\n          })()\n        : [dependencyKey, dependencyValue];\n\n      return {\n        key: dependencyKey,\n        name: PackageDescriptorNameUtils.parse(name),\n        selector,\n      };\n    },\n    stringify: (descriptor) => {\n      return [descriptor.key, descriptor.selector];\n    },\n  };\n\n// export const PackageDependencySelectorUtils;\n","/* eslint-disable complexity */\nimport path from \"node:path\";\nimport { getMapArrayItemForKey } from \"./mapUtils.ts\";\nimport type { PackageDependencyDescriptor } from \"./packageDependenciesUtils.ts\";\nimport {\n  PackageDependencyDescriptorUtils,\n  PackageDescriptorNameUtils,\n} from \"./packageDependenciesUtils.ts\";\nimport type { ProjectWorkspace, Workspace } from \"./packageUtils.ts\";\n\nconst allDependenciesTypes = [\n  \"dependencies\",\n  \"devDependencies\",\n  \"peerDependencies\",\n] as const;\nexport type DependencyType = (typeof allDependenciesTypes)[number];\n\nexport const getWorkspaceName = (workspace: Workspace): string => {\n  return (\n    workspace.pkg.name ?? (path.basename(workspace.cwd) || \"unnamed-workspace\")\n  );\n};\n\ntype WorkspacesDependenciesMap = Map<\n  Workspace,\n  [Workspace, DependencyType, PackageDependencyDescriptor][]\n>;\n\nexport const buildDependentsMaps = (\n  project: ProjectWorkspace,\n): WorkspacesDependenciesMap => {\n  const dependentsMap: WorkspacesDependenciesMap = new Map<\n    Workspace,\n    [Workspace, DependencyType, PackageDependencyDescriptor][]\n  >();\n\n  // Note that we need to do this before applying the new versions,\n  // otherwise the `findWorkspacesByDescriptor` calls won't be able to\n  // resolve the workspaces anymore (because the workspace versions will\n  // have changed and won't match the outdated dependencies).\n\n  for (const [, dependent] of project.children) {\n    for (const set of allDependenciesTypes) {\n      for (const [dependencyKey, dependencyValue] of Object.entries(\n        dependent.pkg[set] || {},\n      )) {\n        if (!dependencyValue) continue;\n        const descriptor = PackageDependencyDescriptorUtils.parse(\n          dependencyKey,\n          dependencyValue,\n        );\n        const workspace = project.children.get(\n          PackageDescriptorNameUtils.stringify(descriptor.name),\n        );\n        if (!workspace) continue;\n\n        const dependents = getMapArrayItemForKey(dependentsMap, workspace);\n        dependents.push([dependent, set, descriptor]);\n      }\n    }\n  }\n\n  return dependentsMap;\n};\n\nexport const buildDependenciesMaps = (\n  project: ProjectWorkspace,\n): WorkspacesDependenciesMap => {\n  const dependenciesMap: WorkspacesDependenciesMap = new Map<\n    Workspace,\n    [Workspace, DependencyType, PackageDependencyDescriptor][]\n  >();\n\n  // Note that we need to do this before applying the new versions,\n  // otherwise the `findWorkspacesByDescriptor` calls won't be able to\n  // resolve the workspaces anymore (because the workspace versions will\n  // have changed and won't match the outdated dependencies).\n\n  for (const dependent of project.children.values()) {\n    for (const set of allDependenciesTypes) {\n      for (const [dependencyKey, dependencyValue] of Object.entries(\n        dependent.pkg[set] || {},\n      )) {\n        if (!dependencyValue) continue;\n        const descriptor = PackageDependencyDescriptorUtils.parse(\n          dependencyKey,\n          dependencyValue,\n        );\n\n        const workspace = project.children.get(\n          PackageDescriptorNameUtils.stringify(descriptor.name),\n        );\n        if (!workspace) continue;\n\n        const dependencies = getMapArrayItemForKey(dependenciesMap, dependent);\n        dependencies.push([workspace, set, descriptor]);\n      }\n    }\n  }\n\n  return dependenciesMap;\n};\n\nexport const buildTopologicalOrderBatches = (\n  project: ProjectWorkspace,\n  dependenciesMap: WorkspacesDependenciesMap,\n): Workspace[][] => {\n  const batches: Workspace[][] = [];\n\n  const added = new Set<Workspace>();\n  const toAdd = new Set<Workspace>([\n    project.root,\n    ...project.children.values(),\n  ]);\n\n  while (toAdd.size > 0) {\n    const batch = new Set<Workspace>();\n    for (const workspace of toAdd) {\n      // make sure top level workspace is always in the last batch\n      if (workspace === project.root && toAdd.size > 1) {\n        continue;\n      }\n\n      const dependencies = dependenciesMap.get(workspace);\n      if (!dependencies || dependencies.every((w) => added.has(w[0]))) {\n        batch.add(workspace);\n      }\n    }\n\n    for (const workspace of batch) {\n      added.add(workspace);\n      toAdd.delete(workspace);\n    }\n\n    if (batch.size === 0) {\n      throw new Error(\"Circular dependency detected\");\n    }\n    batches.push([...batch]);\n  }\n\n  return batches;\n};\n","import semver from \"semver\";\nimport { UsageError } from \"./UsageError.ts\";\nimport type { Workspace } from \"./packageUtils.ts\";\nimport { getWorkspaceName } from \"./workspaceUtils.ts\";\n\nexport type BumpType = \"major\" | \"minor\" | \"patch\";\n\n// https://github.com/yarnpkg/berry/blob/506ded5f5f5a89553435940c74f1d857fd685a42/packages/plugin-version/sources/versionUtils.ts#L10\n// Basically we only support auto-upgrading the ranges that are very simple (^x.y.z, ~x.y.z, >=x.y.z, and of course x.y.z)\nconst SUPPORTED_UPGRADE_REGEXP =\n  // eslint-disable-next-line regexp/no-unused-capturing-group\n  /^((?:>=|[~^])?)(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(\\.(0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*)?(\\+[0-9a-z-]+(\\.[0-9a-z-]+)*)?$/i;\n\nconst yarnWorkspaceProtocol = \"workspace:\";\n\nexport const calcBumpRange = (\n  workspace: Workspace,\n  range: string,\n  newVersion: string,\n): string => {\n  if (range === \"*\") {\n    return range;\n  }\n\n  let useWorkspaceProtocol = false;\n\n  if (range.startsWith(yarnWorkspaceProtocol)) {\n    const slicedRange = range.slice(yarnWorkspaceProtocol.length);\n\n    // Workspaces referenced through their path never get upgraded (\"workspace:packages/yarnpkg-core\")\n    if (slicedRange === workspace.relativeCwd) {\n      return range;\n    }\n\n    if (slicedRange === \"*\") {\n      return range;\n    }\n\n    range = slicedRange;\n    useWorkspaceProtocol = true;\n  }\n\n  const parsed = SUPPORTED_UPGRADE_REGEXP.exec(range);\n  if (!parsed) {\n    const workspaceName = getWorkspaceName(workspace);\n    throw new Error(`Couldn't bump range ${range} in ${workspaceName}`);\n  }\n\n  return `${useWorkspaceProtocol ? yarnWorkspaceProtocol : \"\"}${\n    parsed[1] ?? \"\"\n  }${newVersion}`;\n};\n\nexport const getHighestBumpType = (bumpTypes: BumpType[]): BumpType => {\n  if (bumpTypes.includes(\"major\")) {\n    return \"major\";\n  }\n\n  if (bumpTypes.includes(\"minor\")) {\n    return \"minor\";\n  }\n\n  return \"patch\";\n};\n\nexport const calcBumpType = (\n  bumpType: BumpType,\n  maxBumpType: BumpType,\n): BumpType => {\n  if (maxBumpType === \"major\") {\n    return bumpType;\n  }\n\n  if (maxBumpType === \"minor\") {\n    return bumpType === \"major\" || bumpType === \"minor\" ? \"minor\" : \"patch\";\n  }\n\n  return \"patch\";\n};\n\nconst incVersion = (version: string, bumpType: BumpType): string | null => {\n  // handle breaking of 0.x\n  if (bumpType === \"major\" && semver.major(version) === 0) {\n    bumpType = \"minor\";\n  }\n  return semver.inc(version, bumpType);\n};\n\nexport const incrementVersion = (\n  workspace: Workspace,\n  currentVersion: string,\n  bumpType: BumpType,\n): string => {\n  const newVersion = incVersion(currentVersion, bumpType);\n\n  if (!newVersion) {\n    throw new UsageError(\n      `Could not determine next version for \"${getWorkspaceName(\n        workspace,\n      )}\" (currentVersion: ${currentVersion}, bumpType: ${bumpType}})`,\n    );\n  }\n\n  return newVersion;\n};\n\n// const createPrerelease = (\n//   version: string,\n//   prereleaseType: ReleaseType,\n//   prereleaseId: string,\n// ) => {\n//   return semver.inc(version, prereleaseType, prereleaseId);\n// };\n","import type { Readable } from \"node:stream\";\nimport { text } from \"node:stream/consumers\";\nimport conventionalChangelogCore from \"conventional-changelog-core\";\nimport type { Commit } from \"conventional-commits-parser\";\nimport type { BumperRecommendation } from \"conventional-recommended-bump\";\nimport type { PackageJson } from \"type-fest\";\nimport type { ConventionalChangelogConfig } from \"./conventionalCommitConfigUtils.ts\";\nimport type { Workspace } from \"./packageUtils.ts\";\n\nconst versions: BumperRecommendation[\"releaseType\"][] = [\n  \"major\",\n  \"minor\",\n  \"patch\",\n];\nexport const recommendBump = async (\n  commits: Commit[],\n  config: ConventionalChangelogConfig,\n): Promise<BumperRecommendation> => {\n  const whatBump = config.whatBump;\n  if (!whatBump) {\n    throw new Error(\"whatBump method is missing in config\");\n  }\n  let result: BumperRecommendation = { ...(await whatBump(commits)) };\n  if (result.level != null) {\n    result.releaseType = versions[result.level];\n  } else if (result == null) {\n    result = {};\n  }\n\n  return result;\n};\n\nexport const generateChangelog = (\n  workspace: Workspace,\n  pkg: PackageJson,\n  config: ConventionalChangelogConfig,\n  newTag: string | null,\n  {\n    previousTag = \"\",\n    verbose = false,\n    tagPrefix = \"v\",\n    path = \"\",\n    lernaPackage,\n  }: {\n    previousTag?: string;\n    verbose?: boolean;\n    tagPrefix?: string;\n    path?: string;\n    lernaPackage?: string;\n  } = {},\n  // eslint-disable-next-line @typescript-eslint/max-params\n): Promise<string> => {\n  if (!newTag) {\n    throw new Error(`Missing new tag for package \"${pkg.name ?? \"\"}\"`);\n  }\n  const stream: Readable = conventionalChangelogCore(\n    {\n      cwd: workspace.cwd,\n      config,\n      pkg,\n      path,\n      append: !!previousTag,\n      releaseCount: !previousTag ? 0 : 1,\n      skipUnstable: true,\n      lernaPackage,\n      tagPrefix,\n      verbose,\n      previousTag,\n      currentTag: newTag,\n    },\n    {\n      version: pkg.version,\n      currentTag: newTag,\n      previousTag,\n    },\n    // @ts-expect-error -- path is required to filter commits by path. It does not work if it is only provided in options.\n    {\n      from: previousTag,\n      path,\n    },\n  );\n\n  return text(stream);\n};\n","// eslint-disable-next-line import/no-unresolved\nimport { loadPreset } from \"conventional-changelog-preset-loader\";\nimport type { Preset } from \"conventional-recommended-bump\";\nimport { UsageError } from \"./UsageError.ts\";\nimport type { Workspace } from \"./packageUtils.ts\";\n\nexport type ConventionalChangelogConfig = Preset;\n\nexport const loadConventionalCommitConfig = async (\n  rootWorkspace: Workspace,\n  preset: string,\n): Promise<ConventionalChangelogConfig> => {\n  try {\n    return await loadPreset<ConventionalChangelogConfig>(preset);\n  } catch (error: any) {\n    throw new UsageError(\n      `Failed to require preset \"${preset}\": ${error.message as string}`,\n    );\n  }\n};\n","import childProcess from \"node:child_process\";\nimport type { Workspace } from \"./packageUtils.ts\";\n\ninterface ExecResultIfFailed {\n  code: number | null;\n  signal: string | null;\n  stdout: string;\n  stderr: string;\n}\n\ninterface ExecResultIfSuccess {\n  code: null;\n  signal: null;\n  stdout: string;\n  stderr: string;\n}\n\ntype ExecResult<Strict extends boolean> = Strict extends true\n  ? ExecResultIfSuccess\n  : ExecResultIfFailed;\n\nasync function execvp<const Strict extends boolean>(\n  command: string,\n  args: string[],\n  {\n    cwd = process.cwd(),\n    env = process.env,\n    encoding,\n    strict,\n    stdo = \"pipe\",\n  }: {\n    cwd?: string;\n    env?: typeof process.env;\n    encoding?: BufferEncoding;\n    strict?: Strict;\n    stdo?: \"inherit\" | \"pipe\";\n  },\n): Promise<ExecResult<Strict>> {\n  const stdoutChunks: Uint8Array[] = [];\n  const stderrChunks: Uint8Array[] = [];\n  if (env.PWD !== undefined) {\n    env = { ...env, PWD: cwd };\n  }\n  const subprocess = childProcess.spawn(command, args, {\n    cwd,\n    env,\n    stdio: [\"ignore\", stdo, stdo],\n  });\n  subprocess.stdout?.on(\"data\", (chunk) => {\n    stdoutChunks.push(chunk);\n  });\n  subprocess.stderr?.on(\"data\", (chunk) => {\n    stderrChunks.push(chunk);\n  });\n  return new Promise((resolve, reject) => {\n    subprocess.on(\"error\", (err) => {\n      reject(new Error(`Process ${command} failed to spawn`));\n    });\n    subprocess.on(\"close\", (code, signal) => {\n      const chunksToString = (chunks: Uint8Array[]): string =>\n        stdo === \"inherit\"\n          ? \"\"\n          : Buffer.concat(chunks).toString(encoding ?? \"utf8\");\n      const stdout = chunksToString(stdoutChunks);\n      const stderr = chunksToString(stderrChunks);\n      if (code === 0 || !strict) {\n        resolve({\n          code,\n          signal,\n          stdout,\n          stderr,\n        } as ExecResult<Strict>);\n      } else {\n        reject(\n          new Error(\n            `Process ${[command, ...args].join(\" \")} exited ${code !== null ? `with code ${code}` : `with signal ${signal || \"\"}`}:\\nstdout: ${stdout}\\nstderr: ${stderr}`,\n          ),\n        );\n      }\n    });\n  });\n}\n\nasync function* spawnStreamStdout<const Strict extends boolean>(\n  command: string,\n  args: string[],\n  {\n    cwd = process.cwd(),\n    env = process.env,\n    encoding,\n    strict,\n    separator,\n  }: {\n    cwd?: string;\n    env?: typeof process.env;\n    encoding?: BufferEncoding;\n    strict?: Strict;\n    separator: string;\n  },\n): AsyncGenerator<string, ExecResult<Strict>, unknown> {\n  const stderrChunks: Uint8Array[] = [];\n  if (env.PWD !== undefined) {\n    env = { ...env, PWD: cwd };\n  }\n  const subprocess = childProcess.spawn(command, args, {\n    cwd,\n    env,\n    stdio: [\"ignore\", \"pipe\", \"pipe\"],\n  });\n\n  subprocess.stderr.on(\"data\", (chunk) => {\n    stderrChunks.push(chunk);\n  });\n\n  let chunk: Buffer;\n  let payload: string[];\n  let buffer = \"\";\n\n  for await (chunk of subprocess.stdout) {\n    buffer += chunk.toString();\n\n    if (buffer.includes(separator)) {\n      payload = buffer.split(separator);\n      buffer = payload.pop() || \"\";\n\n      yield* payload;\n    }\n  }\n\n  if (buffer) {\n    yield buffer;\n  }\n\n  return new Promise((resolve, reject) => {\n    subprocess.on(\"error\", (err) => {\n      reject(new Error(`Process ${command} failed to spawn`));\n    });\n    subprocess.on(\"close\", (code, signal) => {\n      const chunksToString = (chunks: Uint8Array[]): string =>\n        Buffer.concat(chunks).toString(encoding ?? \"utf8\");\n      const stderr = chunksToString(stderrChunks);\n      if (code === 0 || !strict) {\n        resolve({\n          code,\n          signal,\n          stderr,\n        } as ExecResult<Strict>);\n      } else {\n        reject(\n          new Error(\n            `Process ${[command, ...args].join(\" \")} exited ${code !== null ? `with code ${code}` : `with signal ${signal || \"\"}`}:\\nstderr: ${stderr}`,\n          ),\n        );\n      }\n    });\n  });\n}\n\nexport const execCommand = (\n  workspace: Workspace,\n  commandAndArgs: string[] = [],\n  stdo: \"inherit\" | \"pipe\" = \"pipe\",\n): ReturnType<typeof execvp> => {\n  const [command, ...args] = commandAndArgs;\n  if (command === undefined) {\n    throw new Error(\"Command is required\");\n  }\n  return execvp(command, args, {\n    cwd: workspace.cwd,\n    strict: true,\n    stdo,\n  });\n};\n\nexport const execCommandStreamStdout = (\n  workspace: Workspace,\n  commandAndArgs: string[] = [],\n  separator = \"\\n\",\n): AsyncGenerator<string, ExecResult<true>, unknown> => {\n  const [command, ...args] = commandAndArgs;\n  if (command === undefined) {\n    throw new Error(\"Command is required\");\n  }\n  return spawnStreamStdout(command, args, {\n    cwd: workspace.cwd,\n    strict: true,\n    separator,\n  });\n};\n","export async function asyncIterableToArray<T>(\n  asyncIterable: AsyncIterable<T>,\n): Promise<T[]> {\n  const result: T[] = [];\n\n  for await (const value of asyncIterable) {\n    result.push(value);\n  }\n\n  return result;\n}\n","import semver from \"semver\";\nimport { UsageError } from \"./UsageError.ts\";\nimport { execCommand, execCommandStreamStdout } from \"./execCommand.ts\";\nimport type { Workspace } from \"./packageUtils.ts\";\n\nexport const getGitCurrentBranch = async (\n  workspace: Workspace,\n): Promise<string> => {\n  const { stdout } = await execCommand(workspace, [\n    \"git\",\n    \"rev-parse\",\n    \"--abbrev-ref\",\n    \"HEAD\",\n  ]);\n  const currentBranch = stdout.trim();\n\n  if (currentBranch === \"HEAD\") {\n    throw new UsageError(\"HEAD is detached. Please checkout a branch.\");\n  }\n\n  return currentBranch;\n};\n\nexport const createGitCommit = async (\n  workspace: Workspace,\n  commitMessage: string,\n): Promise<void> => {\n  await execCommand(workspace, [\"git\", \"add\", \"-A\"]);\n\n  await execCommand(workspace, [\n    \"git\",\n    \"commit\",\n    \"--no-verify\",\n    \"-m\",\n    commitMessage,\n  ]);\n};\n\nexport const createGitTag = async (\n  workspace: Workspace,\n  newTag: string,\n): Promise<void> => {\n  await execCommand(workspace, [\"git\", \"tag\", newTag, \"-m\", newTag]);\n};\n\nexport const pushCommitsAndTags = async (\n  workspace: Workspace,\n  gitRemote: string,\n  currentBranch: string,\n): Promise<void> => {\n  await execCommand(workspace, [\n    \"git\",\n    \"push\",\n    \"--follow-tags\",\n    \"--no-verify\",\n    \"--atomic\",\n    gitRemote,\n    currentBranch,\n  ]);\n};\n\nexport const isBehindRemote = async (\n  workspace: Workspace,\n  gitRemote: string,\n  currentBranch: string,\n): Promise<boolean> => {\n  await execCommand(workspace, [\"git\", \"remote\", \"update\", gitRemote]);\n  const { stdout } = await execCommand(workspace, [\n    \"git\",\n    \"rev-list\",\n    \"--left-right\",\n    \"--count\",\n    `${gitRemote}/${currentBranch}..${currentBranch}`,\n  ]);\n\n  const [behind] = stdout.split(\"\\t\").map((val) => parseInt(val, 10));\n\n  return behind ? behind > 0 : false;\n};\n\nexport const getDirtyFiles = async (workspace: Workspace): Promise<string> => {\n  const { stdout: dirtyFiles } = await execCommand(workspace, [\n    \"git\",\n    \"status\",\n    \"--porcelain\",\n  ]);\n  return dirtyFiles;\n};\n\n// TODO fix this method as it is not safe : it sorts by creator date and does not look for real commits order.\n// Also we could avoid this method and just look for previous commits (for the changelog) until we find a valid tag.\n// eslint-disable-next-line complexity\nexport const getGitLatestTagVersion = async (\n  workspace: Workspace,\n  currentBranch: string,\n  {\n    prefix,\n    skipUnstable,\n  }: {\n    prefix?: string;\n    skipUnstable?: boolean;\n  } = {},\n): Promise<{ tag: string; version: string } | null> => {\n  for await (const tag of execCommandStreamStdout(workspace, [\n    \"git\",\n    \"tag\",\n    \"--merged\",\n    currentBranch,\n    // - means reverse order\n    \"--sort=-creatordate\",\n    ...(prefix ? [\"--list\", `${prefix}*`] : []),\n  ])) {\n    if (tag) {\n      const version = prefix ? tag.slice(prefix.length) : tag;\n      if (!semver.valid(version)) {\n        continue;\n      }\n      if (skipUnstable && semver.prerelease(version)) {\n        continue;\n      }\n      return { tag, version };\n    }\n  }\n\n  return null;\n};\n","// eslint-disable-next-line import/no-unresolved -- esm-only package which is not supported by import plugin.\nimport { Octokit } from \"@octokit/rest\";\nimport { UsageError } from \"./UsageError.ts\";\nimport type { Workspace } from \"./packageUtils.ts\";\n\nexport async function createGitHubClient(): Promise<Octokit> {\n  const { GH_TOKEN, GHE_API_URL, GHE_VERSION } = process.env;\n\n  if (!GH_TOKEN) {\n    throw new UsageError(\n      '\"GH_TOKEN\" environment variable required when \"createRelease\" is set to \"github\"',\n    );\n  }\n\n  if (GHE_VERSION) {\n    Octokit.plugin(\n      await import(`@octokit/plugin-enterprise-rest/ghe-${GHE_VERSION}`),\n    );\n  }\n\n  const options = {\n    auth: `token ${GH_TOKEN}`,\n  };\n\n  if (GHE_API_URL) {\n    // TODO: refactor based on TS feedback\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    options.baseUrl = GHE_API_URL;\n  }\n\n  return new Octokit(options);\n}\n\ninterface ParsedGithubUrl {\n  username: string;\n  reponame: string;\n}\n\nconst githubRegex = /^https?:\\/\\/github.com\\/([^#/]+)\\/([^#/]+?)(?:\\.git)?$/;\nexport const parseGithubRepoUrl = (workspace: Workspace): ParsedGithubUrl => {\n  const repository = workspace.pkg.repository;\n\n  const url: string | undefined =\n    typeof repository === \"string\" ? repository : repository?.url;\n\n  if (!url) {\n    throw new Error(\n      \"No repository URL found in manifest. Please add one and try again. https://docs.npmjs.com/cli/v9/configuring-npm/package-json#repository\",\n    );\n  }\n  const match = githubRegex.exec(url);\n\n  if (!match) {\n    throw new Error(`Invalid GitHub repository URL: \"${url}\"`);\n  }\n  const [, username, reponame] = match;\n  if (!username || !reponame) {\n    throw new Error(`Invalid GitHub repository URL: ${url}`);\n  }\n  return { username, reponame };\n};\n\nexport const createGitRelease = async (\n  githubClient: Octokit,\n  parsedRepoUrl: ParsedGithubUrl,\n  tag: string,\n  body: string,\n  prerelease: boolean,\n  // eslint-disable-next-line @typescript-eslint/max-params\n): Promise<void> => {\n  await githubClient.repos.createRelease({\n    owner: parsedRepoUrl.username,\n    repo: parsedRepoUrl.reponame,\n    // eslint-disable-next-line camelcase\n    tag_name: tag,\n    name: tag,\n    body,\n    draft: false,\n    prerelease,\n  });\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport fs from \"node:fs/promises\";\nimport path from \"node:path\";\nimport mapWorkspaces from \"@npmcli/map-workspaces\";\nimport prettyPkg from \"@pob/pretty-pkg\";\nimport type { PackageJson } from \"type-fest\";\n\nexport interface Workspace {\n  readonly cwd: string;\n  readonly relativeCwd?: string;\n  readonly pkg: PackageJson;\n}\n\nexport interface ProjectWorkspace {\n  readonly root: Workspace;\n  readonly children: Map<string, Workspace>;\n}\n\nexport const createProjectWorkspace = async (\n  root: Workspace,\n): Promise<ProjectWorkspace> => {\n  const map: Map<string, string> = root.pkg.workspaces\n    ? await mapWorkspaces({ cwd: root.cwd, pkg: root.pkg })\n    : new Map();\n\n  const children = new Map<string, Workspace>(\n    await Promise.all(\n      [...map.entries()].map(\n        async ([packageName, packagePath]) =>\n          [\n            packageName,\n            {\n              ...(await createWorkspace(packagePath)),\n              relativeCwd: path.relative(root.cwd, packagePath),\n            } satisfies Workspace,\n          ] as const,\n      ),\n    ),\n  );\n  return { root, children };\n};\n\nconst isAccessible = (path: string): Promise<boolean> =>\n  fs.access(path).then(\n    () => true,\n    () => false,\n  );\n\nexport const findRootWorkspace = async (\n  cwd: string,\n): Promise<Workspace | null> => {\n  let currentPath = cwd;\n  do {\n    const isRootIfOneOfThesePathsExists = await Promise.all([\n      isAccessible(path.join(currentPath, \".yarnrc.yml\")),\n      isAccessible(path.join(currentPath, \"yarn.lock\")),\n    ]);\n    if (isRootIfOneOfThesePathsExists.some(Boolean)) {\n      return createWorkspace(currentPath);\n    }\n    currentPath = path.dirname(currentPath);\n  } while (currentPath && currentPath !== \"/\");\n  return null;\n};\n\nconst getPackageJsonPath = (cwd: string): string =>\n  path.join(cwd, \"package.json\");\n\nexport const createWorkspace = async (path: string): Promise<Workspace> => {\n  const pkg = await readPkg(path);\n  return { cwd: path, pkg };\n};\n\nexport async function writePkg(\n  workspace: Workspace,\n  prettierOptions = undefined,\n): Promise<void> {\n  const string = await prettyPkg(workspace.pkg, prettierOptions);\n  await fs.writeFile(getPackageJsonPath(workspace.cwd), string, \"utf8\");\n}\n\nexport async function readPkg(cwd: string): Promise<PackageJson> {\n  const packagePath = getPackageJsonPath(cwd);\n  // eslint-disable-next-line @typescript-eslint/use-unknown-in-catch-callback-variable\n  const pkg = await fs.readFile(packagePath, \"utf8\").catch((error: Error) => {\n    throw new Error(\n      `Failed to read package.json in \"${cwd}\": ${error instanceof Error ? error.message : String(error)}`,\n    );\n  });\n  try {\n    return JSON.parse(pkg);\n  } catch (error: unknown) {\n    throw new Error(\n      `Failed to parse package.json in \"${cwd}\": ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n","import fs from \"node:fs/promises\";\n\nconst COMMIT_GUIDELINE =\n  \"See [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\";\n\nconst CHANGELOG_HEADER = [\n  \"# Changelog\",\n  \"\",\n  \"All notable changes to this project will be documented in this file.\",\n  COMMIT_GUIDELINE,\n  \"\",\n].join(\"\\n\");\n\nexport const updateChangelogFile = async (\n  versionChangelogContent: string,\n  tagPrefix: string,\n  file = \"CHANGELOG.md\",\n): Promise<void> => {\n  const START_OF_LAST_RELEASE_PATTERN = new RegExp(\n    `(^#+ \\\\[?(?:${tagPrefix})?\\\\d+\\\\.\\\\d+\\\\.\\\\d+|<a name=)`,\n    \"m\",\n  );\n\n  let oldContent = \"\";\n\n  try {\n    oldContent = await fs.readFile(file, \"utf8\");\n    const oldContentStart = oldContent.search(START_OF_LAST_RELEASE_PATTERN);\n    // find the position of the last release and remove header:\n    if (oldContentStart !== -1) {\n      oldContent = oldContent.slice(Math.max(0, oldContentStart));\n    }\n  } catch {}\n\n  await fs.writeFile(\n    file,\n    `${CHANGELOG_HEADER}\\n${versionChangelogContent}\\n${oldContent}`,\n  );\n};\n","/* eslint-disable complexity */\nimport path from \"node:path\";\n// eslint-disable-next-line import/no-unresolved\nimport { ConventionalGitClient } from \"@conventional-changelog/git-client\";\nimport { Option, program } from \"commander\";\nimport { ConsoleHandler, Level, Logger, addConfig } from \"nightingale\";\nimport { satisfies } from \"semver\";\nimport { UsageError } from \"../utils/UsageError.ts\";\nimport type { BumpType } from \"../utils/bumpTypeUtils.ts\";\nimport {\n  calcBumpRange,\n  calcBumpType,\n  getHighestBumpType,\n  incrementVersion,\n} from \"../utils/bumpTypeUtils.ts\";\nimport {\n  generateChangelog,\n  recommendBump,\n} from \"../utils/conventionalChangelogUtils.ts\";\nimport { loadConventionalCommitConfig } from \"../utils/conventionalCommitConfigUtils.ts\";\nimport { execCommand } from \"../utils/execCommand.ts\";\nimport { asyncIterableToArray } from \"../utils/generatorUtils.ts\";\nimport {\n  createGitCommit,\n  createGitTag,\n  getDirtyFiles,\n  getGitCurrentBranch,\n  isBehindRemote,\n  pushCommitsAndTags,\n} from \"../utils/gitUtils.ts\";\nimport {\n  createGitHubClient,\n  createGitRelease,\n  parseGithubRepoUrl,\n} from \"../utils/githubUtils.ts\";\nimport {\n  PackageDependencyDescriptorUtils,\n  PackageDescriptorNameUtils,\n} from \"../utils/packageDependenciesUtils.ts\";\nimport type { PackageDependencyDescriptor } from \"../utils/packageDependenciesUtils.ts\";\nimport type { Workspace } from \"../utils/packageUtils.ts\";\nimport {\n  createProjectWorkspace,\n  createWorkspace,\n  findRootWorkspace,\n  writePkg,\n} from \"../utils/packageUtils.ts\";\nimport { updateChangelogFile } from \"../utils/updateChangelog.ts\";\nimport type { DependencyType } from \"../utils/workspaceUtils.ts\";\nimport {\n  buildDependenciesMaps,\n  buildTopologicalOrderBatches,\n  getWorkspaceName,\n} from \"../utils/workspaceUtils.ts\";\n\nexport interface VersionCommandOptions {\n  cwd: string;\n  includesRoot: boolean;\n  dryRun: boolean;\n  force?: \"major\" | \"minor\" | \"patch\";\n  prerelease?: string;\n  json: boolean;\n  preset: string;\n  tagVersionPrefix: string;\n  changelog: string;\n  commitMessage: string;\n  createRelease: boolean;\n  bumpDependentsHighestAs: \"major\" | \"minor\" | \"patch\";\n  alwaysBumpPeerDependencies: boolean;\n  gitRemote: string;\n  ignoreChanges?: string;\n  verbose?: boolean;\n  cwdIsRoot?: boolean;\n}\n\ninterface BumpableWorkspace {\n  workspace: Workspace;\n  previousTag?: string;\n  workspaceName: string;\n  isRoot: boolean;\n  version: string;\n}\n\ninterface ChangedWorkspace {\n  bumpReason?: string;\n  bumpType: BumpType;\n}\n\ninterface NoVersionToUpdateWorkspace {\n  // for legacy configuration not using workspaces ranges https://yarnpkg.com/features/workspaces#workspace-ranges-workspace\n  dependenciesToBump: [DependencyType, PackageDependencyDescriptor, string][];\n}\n\ninterface BumpedWorkspace extends ChangedWorkspace, NoVersionToUpdateWorkspace {\n  bumpForDependenciesReasons?: string[];\n  hasChanged: boolean;\n  currentVersion: string;\n  newVersion: string;\n  newTag: string | null;\n}\n\nexport const versionCommandAction = async (\n  options: VersionCommandOptions,\n  { nightingaleHandler = new ConsoleHandler(Level.INFO) } = {},\n): Promise<void> => {\n  // todo nightingale-cli\n  if (options.json) {\n    process.env.NIGHTINGALE_CONSOLE_FORMATTER = \"json\";\n  }\n\n  addConfig({\n    pattern: /^yarn-version/,\n    handler: nightingaleHandler,\n  });\n\n  const logger = new Logger(\"yarn-version\");\n\n  const rootWorkspace = await (options.cwdIsRoot\n    ? createWorkspace(options.cwd)\n    : findRootWorkspace(options.cwd));\n\n  if (!rootWorkspace) {\n    throw new UsageError(\"Could not find root workspace from this path.\");\n  }\n\n  const project = await createProjectWorkspace(rootWorkspace);\n\n  if (!options.dryRun) {\n    const dirtyFiles = await getDirtyFiles(project.root);\n    if (dirtyFiles) {\n      throw new Error(\n        `Dirty Files:\\n${dirtyFiles}\\n\\nThere are uncommitted changes in the git repository. Please commit or stash them first.`,\n      );\n    }\n  }\n\n  const rootWorkspaceChildren = [...project.children.values()];\n  let rootNewVersion = \"\";\n  let rootNewTag = \"\";\n  const isMonorepo = rootWorkspaceChildren.length > 0;\n  const isMonorepoVersionIndependent = isMonorepo && !rootWorkspace.pkg.version;\n  const workspaces =\n    !(isMonorepo && !rootWorkspaceChildren) || options.includesRoot\n      ? [rootWorkspace, ...rootWorkspaceChildren]\n      : rootWorkspaceChildren;\n\n  if (options.prerelease) {\n    throw new UsageError(\"--prerelease is not supported yet.\");\n  }\n  if (options.ignoreChanges) {\n    throw new UsageError(\"--ignore-changes is not supported yet.\");\n  }\n\n  const conventionalGitClient = new ConventionalGitClient(rootWorkspace.cwd);\n\n  const [\n    conventionalCommitConfig,\n    githubClient,\n    parsedRepoUrl,\n    gitCurrentBranch,\n  ] = await Promise.all([\n    loadConventionalCommitConfig(rootWorkspace, options.preset),\n    // create client early to fail fast if necessary\n    options.createRelease ? createGitHubClient() : undefined,\n    options.createRelease ? parseGithubRepoUrl(rootWorkspace) : undefined,\n    getGitCurrentBranch(rootWorkspace),\n  ]);\n\n  const rootPreviousVersionTagPromise = options.force\n    ? null\n    : conventionalGitClient.getLastSemverTag({\n        prefix: options.tagVersionPrefix,\n        skipUnstable: true,\n      });\n\n  const buildTagName = (workspace: Workspace, version: string): string =>\n    `${\n      isMonorepo && workspace !== rootWorkspace\n        ? `${getWorkspaceName(workspace)}@`\n        : options.tagVersionPrefix\n    }${version}`;\n\n  const changedWorkspaces = new Map<Workspace, ChangedWorkspace>();\n  const dependenciesMap = isMonorepo ? buildDependenciesMaps(project) : null;\n\n  // todo logger.group\n  logger.info(\n    options.force\n      ? \"Check all workspaces (force option)\"\n      : \"Finding changed workspaces\",\n  );\n\n  // check workspaces and create bumpableWorkspaces\n\n  const bumpableWorkspaces: BumpableWorkspace[] = [];\n  for (const workspace of workspaces) {\n    const workspaceName = getWorkspaceName(workspace);\n    const isRoot = workspace === rootWorkspace;\n    if (isRoot && isMonorepo && isMonorepoVersionIndependent) continue;\n\n    const version = workspace.pkg.version;\n\n    if (!version || version === \"0.0.0\") {\n      if (\n        (isRoot || isMonorepoVersionIndependent) &&\n        (!isMonorepo || !isMonorepoVersionIndependent)\n      ) {\n        throw new UsageError(\n          'package.json has no version in its manifest. For the first release, set to \"1.0.0-pre\" or \"0.1.0-pre\".',\n        );\n      }\n\n      logger.info(`${workspaceName}: skipped (no version)`);\n      continue;\n    }\n\n    bumpableWorkspaces.push({\n      workspace,\n      workspaceName,\n      isRoot,\n      version,\n    });\n  }\n\n  if (bumpableWorkspaces.length > 0) {\n    logger.info(\"Found bumpable workspaces\", {\n      count: bumpableWorkspaces.length,\n    });\n  }\n\n  const previousTagByWorkspace = new Map<Workspace, string | null>(\n    await Promise.all(\n      bumpableWorkspaces.map(async ({ workspace, workspaceName, isRoot }) => {\n        const packageOption =\n          isMonorepo && isMonorepoVersionIndependent\n            ? workspaceName\n            : undefined;\n\n        const previousVersionTagPrefix = packageOption\n          ? `${packageOption}@`\n          : options.tagVersionPrefix;\n\n        const previousTagAndVersion = await (isRoot ||\n        !isMonorepoVersionIndependent\n          ? rootPreviousVersionTagPromise\n          : conventionalGitClient.getLastSemverTag({\n              prefix: previousVersionTagPrefix,\n              skipUnstable: true,\n            }));\n\n        return [workspace, previousTagAndVersion || null] as const;\n      }),\n    ),\n  );\n\n  if (options.dryRun) {\n    logger.info(\"Previous tags\", {\n      previousTagByWorkspace: Object.fromEntries(\n        [...previousTagByWorkspace.entries()].map(\n          ([workspace, previousTag]) => [\n            getWorkspaceName(workspace),\n            previousTag,\n          ],\n        ),\n      ),\n    });\n  }\n\n  const commitsByWorkspace = options.force\n    ? undefined\n    : new Map(\n        await Promise.all(\n          bumpableWorkspaces.map(async ({ workspace }) => {\n            const previousTag = previousTagByWorkspace.get(workspace);\n\n            const workspaceRelativePath = path.relative(\n              rootWorkspace.cwd,\n              workspace.cwd,\n            );\n            return [\n              workspace,\n              await asyncIterableToArray(\n                conventionalGitClient.getCommits(\n                  {\n                    path: workspaceRelativePath,\n                    from: previousTag || undefined,\n                  },\n                  conventionalCommitConfig.parser,\n                ),\n              ),\n            ] as const;\n          }),\n        ),\n      );\n\n  // find changed workspaces\n\n  for (const { workspace, workspaceName } of bumpableWorkspaces) {\n    let bumpType: BumpType | null = null;\n    let bumpReason: string | undefined;\n\n    if (options.force) {\n      bumpType = options.force;\n      bumpReason = \"forced by --force flag\";\n    } else {\n      const commits = commitsByWorkspace?.get(workspace);\n\n      // No changes found for this package\n      if (!commits || commits.length === 0) {\n        logger.info(`${workspaceName}: skipped (no changes)`);\n        continue;\n      }\n\n      const { releaseType, reason } = await recommendBump(\n        commits,\n        conventionalCommitConfig,\n      );\n      bumpReason = reason;\n\n      if (releaseType) {\n        bumpType = releaseType as BumpType;\n      }\n    }\n\n    if (bumpType) {\n      if (isMonorepo && !workspace.pkg.name) {\n        throw new Error(\"Workspace name is required\");\n      }\n\n      const currentVersion = workspace.pkg.version;\n\n      if (!currentVersion) {\n        throw new UsageError(\n          `Invalid \"${getWorkspaceName(workspace)}\" version`,\n        );\n      }\n\n      changedWorkspaces.set(workspace, {\n        bumpType,\n        bumpReason,\n      });\n    }\n  }\n\n  if (changedWorkspaces.size === 0) {\n    logger.info(\"No changed workspaces\");\n    return;\n  }\n\n  logger.info(\"Preparing bumping\");\n\n  const bumpedWorkspaces = new Map<Workspace, BumpedWorkspace>();\n  const noVersionToUpdateWorkspaces = new Map<\n    Workspace,\n    NoVersionToUpdateWorkspace\n  >();\n  const batches = dependenciesMap\n    ? buildTopologicalOrderBatches(project, dependenciesMap)\n    : [[rootWorkspace]];\n\n  for (const batch of batches) {\n    for (const workspace of batch) {\n      const currentVersion = workspace.pkg.version;\n\n      if (!currentVersion && !workspace.pkg.private) {\n        throw new UsageError(\n          `Invalid \"${getWorkspaceName(workspace)}\" version`,\n        );\n      }\n\n      const changedWorkspace = changedWorkspaces.get(workspace);\n      let bumpType: BumpType | null = null;\n      const bumpReasons: string[] = [];\n      const dependenciesToBump: BumpedWorkspace[\"dependenciesToBump\"] = [];\n\n      if (changedWorkspace) {\n        bumpType = changedWorkspace.bumpType;\n        bumpReasons.push(changedWorkspace.bumpReason || \"by commits\");\n      }\n\n      const dependencies = dependenciesMap?.get(workspace);\n\n      if (dependencies) {\n        for (const [\n          dependencyWorkspace,\n          dependencyType,\n          dependencyDescriptor,\n        ] of dependencies) {\n          const dependencyBumpedWorkspace =\n            bumpedWorkspaces.get(dependencyWorkspace);\n\n          if (!dependencyBumpedWorkspace) {\n            continue;\n          }\n\n          if (\n            dependencyType === \"peerDependencies\" &&\n            !options.alwaysBumpPeerDependencies &&\n            // skip when peerdependency with a new version satisfied by the existing range.\n            satisfies(\n              dependencyBumpedWorkspace.newVersion,\n              dependencyDescriptor.selector,\n              { includePrerelease: true },\n            )\n          ) {\n            continue;\n          }\n\n          const newRange = calcBumpRange(\n            workspace,\n            dependencyDescriptor.selector,\n            dependencyBumpedWorkspace.newVersion,\n          );\n\n          if (dependencyDescriptor.selector === newRange) {\n            continue;\n          }\n\n          dependenciesToBump.push([\n            dependencyType,\n            dependencyDescriptor,\n            newRange,\n          ]);\n\n          bumpType = getHighestBumpType([\n            bumpType ?? \"patch\",\n            calcBumpType(\n              dependencyBumpedWorkspace.bumpType,\n              options.bumpDependentsHighestAs,\n            ),\n          ]);\n\n          bumpReasons.push(\n            `Version bump for dependency: ${PackageDescriptorNameUtils.stringify(dependencyDescriptor.name)}`,\n          );\n        }\n      }\n\n      const workspaceName = getWorkspaceName(workspace);\n      if (!currentVersion) {\n        logger.info(`${workspaceName}: skipped (no version)`);\n        if (workspace !== rootWorkspace) {\n          noVersionToUpdateWorkspaces.set(workspace, {\n            dependenciesToBump,\n          });\n        }\n      } else if (!bumpType) {\n        logger.info(\n          `${workspaceName}: skipped (${\n            changedWorkspace\n              ? `no bump recommended by ${options.preset}`\n              : \"no changes\"\n          })`,\n        );\n      } else {\n        const newVersion = incrementVersion(\n          workspace,\n          currentVersion,\n          bumpType,\n        );\n\n        const tagName = buildTagName(workspace, newVersion);\n\n        if (workspace === rootWorkspace) {\n          rootNewVersion = newVersion;\n          rootNewTag = tagName;\n        }\n\n        if (workspace !== rootWorkspace || !isMonorepo) {\n          const bumpReason = bumpReasons.join(\"\\n\");\n          bumpedWorkspaces.set(workspace, {\n            currentVersion,\n            bumpType,\n            bumpReason,\n            bumpForDependenciesReasons: changedWorkspace\n              ? bumpReasons.slice(1)\n              : bumpReasons,\n            newVersion,\n            newTag: tagName,\n            hasChanged: changedWorkspace !== undefined,\n            dependenciesToBump,\n          });\n\n          logger.info(\n            `${workspaceName}: ${currentVersion} -> ${\n              !isMonorepo || isMonorepoVersionIndependent ? newVersion : \"bump\"\n            } (${bumpReason.replace(\"\\n\", \" ; \")})`,\n          );\n          // TODO Json only:\n          // logger.info({\n          //   cwd: npath.fromPortablePath(workspace.cwd),\n          //   ident: workspaceName,\n          //   oldVersion: currentVersion,\n          //   ...(isMonorepoVersionIndependent ? { newVersion } : {}),\n          //   bumpType,\n          //   bumpReasons,\n          // });\n        }\n      }\n    }\n  }\n\n  // TODO ask for confirmation\n  // if (!this.yes) {\n  // }\n\n  // TODO do this entire phase here, not override for not independent only\n  if (isMonorepo && !isMonorepoVersionIndependent) {\n    const currentVersion = rootWorkspace.pkg.version!;\n    const highestBumpType = getHighestBumpType(\n      [...bumpedWorkspaces.values()].map(({ bumpType }) => bumpType),\n    );\n    const newVersion = incrementVersion(\n      rootWorkspace,\n      currentVersion,\n      highestBumpType,\n    );\n    rootNewVersion = newVersion;\n    rootNewTag = buildTagName(rootWorkspace, newVersion);\n\n    [...bumpedWorkspaces.entries()].forEach(([workspace, bumpedWorkspace]) => {\n      const isRoot = workspace === rootWorkspace;\n      if (isRoot) {\n        throw new Error(\"Unexpected root found in bumped workspaces\");\n      }\n      bumpedWorkspace.bumpType = highestBumpType;\n      bumpedWorkspace.newVersion = newVersion;\n      bumpedWorkspace.newTag = null;\n    });\n\n    [\n      ...bumpedWorkspaces.entries(),\n      ...noVersionToUpdateWorkspaces.entries(),\n    ].forEach(([workspace, { dependenciesToBump }]) => {\n      dependenciesToBump.forEach((dependencyToBump) => {\n        dependencyToBump[2] = calcBumpRange(\n          workspace,\n          dependencyToBump[1].selector,\n          newVersion,\n        );\n      });\n    });\n\n    bumpedWorkspaces.set(rootWorkspace, {\n      currentVersion,\n      bumpType: highestBumpType,\n      hasChanged: true,\n      newVersion: rootNewVersion,\n      newTag: rootNewTag,\n      dependenciesToBump: [],\n    });\n\n    logger.info(\n      `${currentVersion} -> ${newVersion}`,\n      // TODO Json only:\n      // {\n      //   oldVersion: currentVersion,\n      //   newVersion, },\n    );\n  }\n\n  // do modifications\n\n  // Update yarn.lock ; must be done to make sure preversion script can be ran\n\n  if (!options.dryRun) {\n    logger.info(`${getWorkspaceName(rootWorkspace)}: Running install`);\n    await execCommand(rootWorkspace, [\"yarn\", \"install\"], \"inherit\");\n\n    logger.info(\"Lifecycle script: preversion\");\n\n    if (isMonorepoVersionIndependent && rootWorkspace.pkg.scripts?.preversion) {\n      await execCommand(\n        rootWorkspace,\n        [\"yarn\", \"run\", \"preversion\"],\n        \"inherit\",\n      );\n    }\n\n    // lifecycle: preversion\n    for (const workspace of bumpedWorkspaces.keys()) {\n      if (workspace.pkg.scripts?.preversion) {\n        await execCommand(workspace, [\"yarn\", \"run\", \"preversion\"], \"inherit\");\n      }\n    }\n\n    logger.info(\"Modifying versions in package.json\");\n    // update versions\n\n    await Promise.all(\n      [...bumpedWorkspaces.entries()].map(\n        ([workspace, { newVersion, dependenciesToBump }]) => {\n          workspace.pkg.version = newVersion;\n\n          for (const [\n            dependencyType,\n            dependencyDescriptor,\n            dependencyNewRange,\n          ] of dependenciesToBump) {\n            const newDescriptor = PackageDependencyDescriptorUtils.make(\n              dependencyDescriptor,\n              dependencyNewRange,\n            );\n            const [key, newValue] =\n              PackageDependencyDescriptorUtils.stringify(newDescriptor);\n            workspace.pkg[dependencyType]![key] = newValue;\n          }\n\n          return writePkg(workspace);\n        },\n      ),\n    );\n\n    // Update yarn.lock ; must be done before running again lifecycle scripts\n    logger.info(`${getWorkspaceName(rootWorkspace)}: Running install`);\n    await execCommand(rootWorkspace, [\"yarn\", \"install\"], \"inherit\");\n\n    // lifecycle: version\n    logger.info(\"Lifecycle script: version\");\n    for (const workspace of bumpedWorkspaces.keys()) {\n      if (workspace.pkg.scripts?.version) {\n        await execCommand(workspace, [\"yarn\", \"run\", \"version\"], \"inherit\");\n      }\n    }\n  }\n\n  if (isMonorepoVersionIndependent && rootWorkspace.pkg.scripts?.version) {\n    await execCommand(rootWorkspace, [\"yarn\", \"run\", \"version\"], \"inherit\");\n  }\n\n  const changelogs = new Map<Workspace, string>();\n\n  await Promise.all(\n    [...bumpedWorkspaces.entries()].map(\n      async ([\n        workspace,\n        { newTag, hasChanged, bumpReason, bumpForDependenciesReasons },\n      ]) => {\n        const workspaceRelativePath =\n          rootWorkspace === workspace\n            ? undefined\n            : path.relative(rootWorkspace.cwd, workspace.cwd);\n\n        let changelog = await generateChangelog(\n          rootWorkspace,\n          workspace.pkg,\n          conventionalCommitConfig,\n          isMonorepoVersionIndependent ? newTag : rootNewTag,\n          {\n            path: workspaceRelativePath,\n            previousTag: previousTagByWorkspace.get(workspace) || undefined,\n            verbose: options.verbose,\n            tagPrefix: options.tagVersionPrefix,\n            lernaPackage:\n              rootWorkspace === workspace\n                ? undefined\n                : getWorkspaceName(workspace),\n          },\n        );\n\n        if (bumpForDependenciesReasons && workspace !== rootWorkspace) {\n          if (bumpForDependenciesReasons.length > 0) {\n            changelog += `${!changelog.endsWith(\"\\n\\n\") ? \"\\n\" : \"\"}${bumpForDependenciesReasons.join(\"\\n\")}\\n\\n`;\n          }\n        }\n\n        if (changelog.slice(changelog.indexOf(\"\\n\")).trim().length === 0) {\n          changelog += `${!changelog.endsWith(\"\\n\\n\") ? \"\\n\" : \"\"}Note: no notable changes\\n\\n`;\n        }\n\n        if (!changelog && rootWorkspace === workspace) {\n          throw new Error(\"No changelog found for root workspace\");\n        }\n\n        changelogs.set(workspace, changelog);\n\n        if (options.changelog) {\n          if (options.dryRun) {\n            logger.info(\n              `${getWorkspaceName(workspace)}: ${\n                options.changelog\n              }\\n${changelog}`,\n            );\n          } else {\n            await updateChangelogFile(\n              changelog,\n              options.tagVersionPrefix,\n              `${workspace.cwd}/${options.changelog}`,\n            );\n          }\n        }\n      },\n    ),\n  );\n\n  if (!options.dryRun) {\n    // TODO nightingale separator\n    console.log();\n\n    // install to update versions in lock file\n    logger.info(`${getWorkspaceName(rootWorkspace)}: Running install`);\n    await execCommand(rootWorkspace, [\"yarn\", \"install\"], \"inherit\");\n\n    // TODO nightingale separator\n    console.log();\n\n    logger.info(\"Commit, tag and push\", {\n      changedFiles: await getDirtyFiles(rootWorkspace),\n    });\n\n    const tagsSet = new Set<string>(\n      [...bumpedWorkspaces.values()]\n        .map(({ newTag }) => newTag)\n        .filter((newTag) => newTag !== null),\n    );\n\n    const tagsInCommitMessage = [...tagsSet]\n      .map((tag) => `- ${tag}`)\n      .join(\"\\n\");\n    const message = options.commitMessage\n      .replace(/\\\\n/g, \"\\n\")\n      .replace(\n        /%a/g,\n        isMonorepoVersionIndependent\n          ? `\\n\\n${tagsInCommitMessage}`\n          : rootNewVersion,\n      )\n      .replace(/%s/g, rootNewTag)\n      .replace(/%v/g, rootNewVersion)\n      .replace(/%t/g, tagsInCommitMessage);\n\n    await createGitCommit(rootWorkspace, message);\n\n    for (const [workspace, { newTag }] of bumpedWorkspaces.entries()) {\n      if (newTag === null) continue;\n      await createGitTag(workspace, newTag);\n    }\n\n    if (\n      await isBehindRemote(rootWorkspace, options.gitRemote, gitCurrentBranch)\n    ) {\n      logger.error(\"Remote is ahead, aborting\");\n      // eslint-disable-next-line unicorn/no-process-exit\n      process.exit(1);\n    }\n\n    await pushCommitsAndTags(\n      rootWorkspace,\n      options.gitRemote,\n      gitCurrentBranch,\n    );\n\n    // run postversion\n    if (rootWorkspace.pkg.scripts?.postversion) {\n      await execCommand(\n        rootWorkspace,\n        [\"yarn\", \"run\", \"postversion\"],\n        \"inherit\",\n      );\n    }\n\n    // TODO open github PR\n\n    if (options.createRelease && githubClient && parsedRepoUrl) {\n      logger.info(\"Create git release\");\n\n      await Promise.all(\n        [...bumpedWorkspaces.entries()].map(([workspace, { newTag }]) => {\n          if (newTag === null) return undefined;\n          const changelog = changelogs.get(workspace);\n          if (!changelog) {\n            logger.warn(\n              `No changelog found for workspace: ${getWorkspaceName(\n                workspace,\n              )}`,\n            );\n            return undefined;\n          }\n          return createGitRelease(\n            githubClient,\n            parsedRepoUrl,\n            newTag,\n            changelog,\n            !!options.prerelease,\n          );\n        }),\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== \"test\") {\n    // issue in @conventional-changelog/git-client\n    // eslint-disable-next-line unicorn/no-process-exit\n    process.exit(0);\n  }\n};\n\nexport const Defaults: VersionCommandOptions = {\n  cwd: process.cwd(),\n  includesRoot: false,\n  dryRun: false,\n  json: false,\n  preset: \"conventional-changelog-conventionalcommits\",\n  tagVersionPrefix: \"v\",\n  changelog: \"CHANGELOG.md\",\n  commitMessage: \"chore: release %a\",\n  createRelease: false,\n  bumpDependentsHighestAs: \"major\",\n  alwaysBumpPeerDependencies: false,\n  gitRemote: \"origin\",\n  verbose: false,\n};\n\nexport default program\n  .command(\"version\")\n  .usage(\"Bump package version using conventional commit\")\n  .addOption(\n    new Option(\"--includes-root\", \"Release root workspace [untested]\").default(\n      Defaults.includesRoot,\n    ),\n  )\n  .addOption(new Option(\"--cwd\", \"working directory\").default(process.cwd()))\n  .addOption(\n    new Option(\n      \"--dry-run\",\n      \"Print the versions without actually generating the package archive\",\n    ).default(Defaults.dryRun),\n  )\n  .addOption(new Option(\"-v,--verbose\").default(Defaults.verbose))\n  .addOption(\n    new Option(\"--force <type>\", \"Specify the release type\").choices([\n      \"major\",\n      \"minor\",\n      \"patch\",\n    ]),\n  )\n  .addOption(\n    new Option(\n      \"--prerelease [releaseType]\",\n      \"Add a prerelease identifier to new versions\",\n    ),\n  )\n  .addOption(\n    new Option(\n      \"--preset <presetName>\",\n      \"Conventional Changelog preset to require. Defaults to conventional-changelog-conventionalcommits.\",\n    ).default(\"conventional-changelog-conventionalcommits\"),\n  )\n  .addOption(\n    new Option(\"--tag-version-prefix <prefix>\", \"Tag version prefix\").default(\n      Defaults.tagVersionPrefix,\n    ),\n  )\n  .addOption(\n    new Option(\n      \"--changelog <path>\",\n      \"Changelog path. Default to CHANGELOG.md.\",\n    ).default(Defaults.changelog),\n  )\n  .addOption(\n    new Option(\n      \"-m,--commit-message <message>\",\n      'Commit message. Default to \"chore: release %a\". You can use %v for the version, %s for the version with prefix, %t to list tags, %a for auto best display.',\n    ).default(Defaults.commitMessage),\n  )\n  .addOption(\n    new Option(\"--create-release <type>\", \"Create a release\").choices([\n      \"github\",\n    ]),\n  )\n  .addOption(\n    new Option(\n      \"--bump-dependents-highest-as <type>\",\n      \"Bump dependents highest version as major, minor or patch\",\n    )\n      .choices([\"major\", \"minor\", \"patch\"])\n      .default(Defaults.bumpDependentsHighestAs),\n  )\n  .addOption(\n    new Option(\n      \"--always-bump-peer-dependencies\",\n      \"Always bump peer dependencies. Default to bumping only if the version doesn't satisfies the peer dependency range.\",\n    ).default(Defaults.alwaysBumpPeerDependencies),\n  )\n  .addOption(\n    new Option(\n      \"--git-remote <remote-name>\",\n      \"Git remote to push commits and tags to\",\n    ).default(Defaults.gitRemote),\n  )\n  .addOption(\n    new Option(\n      \"--ignore-changes <glob>\",\n      'Ignore changes in files matching the glob. Example: \"**/*.test.js\"',\n    ),\n  )\n  .action((options) => versionCommandAction(options));\n","import fs from \"node:fs\";\nimport { program } from \"commander\";\n\nimport \"./commands/version.ts\";\n\n// relative to dist directory\nconst pkg = JSON.parse(\n  // eslint-disable-next-line unicorn/prefer-json-parse-buffer\n  fs.readFileSync(new URL(\"../package.json\", import.meta.url), \"utf8\"),\n);\n\nprogram.name(pkg.name).description(pkg.description).version(pkg.version);\nprogram.parse();\n"],"names":["selector","path","fs"],"mappings":"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"}